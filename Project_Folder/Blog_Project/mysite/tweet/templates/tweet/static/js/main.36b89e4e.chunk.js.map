{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.36b89e4e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      let tempNewTweets = [...newTweets]\r\n      // change this to a server side call\r\n      tempNewTweets.unshift({\r\n        content: newVal,\r\n        likes: 0,\r\n        id: 12313\r\n      })\r\n      setNewTweets(tempNewTweets)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n              <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n            </div>\r\n        <TweetsList newTweets={newTweets} />\r\n    </div>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(()=>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setTweetsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if (action.type === 'like') {\r\n        if (userLike === true) {\r\n          // perhaps i Unlike it?\r\n          setLikes(likes - 1)\r\n          setUserLike(false)\r\n        } else {\r\n          setLikes(likes + 1)\r\n          setUserLike(true)\r\n        }\r\n\r\n      }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n\r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className='btn btn-group'>\r\n          <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\r\n          <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n          <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"\"}}/>\r\n        </div>\r\n    </div>\r\n  }\r\n","export function loadTweets(callback) {\r\n  const xhr = new XMLHttpRequest()\r\n  const method = 'GET' // \"POST\"\r\n  const url='http://localhost:8000/tweet/tweets/'\r\n  const responseType = \"json\"\r\n  xhr.responseType = responseType\r\n  xhr.open(method, url)\r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    console.log(e)\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send()\r\n}\r\n","\n  import React, {useEffect, useState} from 'react';\n  import logo from './logo.svg';\n  import './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n  function App() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <div>\n            <TweetsComponent />\n          </div>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n\n  export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweets\")\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}